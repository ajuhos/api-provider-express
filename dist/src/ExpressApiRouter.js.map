{"version":3,"file":"ExpressApiRouter.js","sourceRoot":"","sources":["../../src/ExpressApiRouter.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiEdgeError, ApiEdgeQueryResponse, Api, ApiRequestType} from \"api-core\";\nimport {ApiQueryStringParser} from \"./ApiQueryStringParser\";\nimport * as express from \"express\";\n\ninterface ExtendedRequest extends express.Request {\n    error: ApiEdgeError|Error;\n    api: Api;\n    apiPath: string;\n    user: any;\n}\n\nexport class ExpressApiRouter {\n\n    defaultApi: Api;\n    apis: Api[];\n\n    private apiVersions: string[];\n\n    constructor(apis: Api[]) {\n        this.apis = apis;\n        this.defaultApi = apis[0];\n\n        this.apiVersions = apis.map(api => api.version);\n    }\n\n    apply = (app: express.Router) => {\n        app.use('/v:version/*', (req: ExtendedRequest, res: express.Response, next: express.NextFunction) => {\n            let index = this.apiVersions.indexOf(req.params.version);\n            if(index == -1) {\n                req.error = new ApiEdgeError(400, \"Unsupported API version\");\n                next()\n            }\n            else {\n                req.api = this.apis[index];\n                req.apiPath = req.path.replace(`/v${req.api.version}/`, '');\n                next()\n            }\n        });\n\n        app.use('/*', (req: ExtendedRequest, res: express.Response, next: express.NextFunction) => {\n            if(!req.api) {\n                req.api = this.defaultApi;\n                req.apiPath = req.path.replace('/', '');\n            }\n\n            next()\n        });\n\n        app.use((req: ExtendedRequest, res: express.Response, next: express.NextFunction) => {\n            if(req.error || !req.api) next();\n            else {\n                try {\n                    let request = req.api.parseRequest(req.apiPath.split('/'));\n\n                    if(!request.path.segments.length) {\n                        req.error = new ApiEdgeError(404, 'Not Found');\n                        return next()\n                    }\n\n                    request.context = ApiQueryStringParser.parse(req.query, request.path);\n\n                    if (req.body) {\n                        request.body = req.body;\n                    }\n\n                    switch(req.method) {\n                        case \"GET\":\n                            request.type = ApiRequestType.Read;\n                            break;\n                        case \"POST\":\n                            request.type = ApiRequestType.Create;\n                            break;\n                        case \"PUT\":\n                            request.type = ApiRequestType.Update;\n                            break;\n                        case \"PATCH\":\n                            request.type = ApiRequestType.Patch;\n                            break;\n                        case \"DELETE\":\n                            request.type = ApiRequestType.Delete;\n                            break;\n                    }\n\n                    let query = req.api.buildQuery(request);\n                    query.request = request;\n\n                    //TODO: req.user - Is this an acceptable solution?\n                    query.execute(req.user)\n                        .then((resp: ApiEdgeQueryResponse) => {\n                            if(resp.metadata) {\n                                if(resp.metadata.pagination) {\n                                    const total = resp.metadata.pagination.total || 0,\n                                        limit = +req.query.limit || ApiQueryStringParser.defaultLimit;\n                                    res.setHeader('X-Total-Count', req.query.page ? Math.ceil(total / limit) : total);\n                                }\n                            }\n\n                            res.json(resp.data)\n                        })\n                        .catch((e: any) => {\n                            req.error = e;\n                            next()\n                        })\n                }\n                catch (e) {\n                    req.error = e;\n                    next()\n                }\n            }\n        });\n\n        app.use((req: ExtendedRequest, res: express.Response) => {\n            let e = req.error;\n            if(e instanceof ApiEdgeError) {\n                res.status(e.status).send(e.message)\n            }\n            else {\n                res.status(500).send(\"Internal Server Error\")\n            }\n        });\n    }\n}"]}
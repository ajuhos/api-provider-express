{"version":3,"file":"ApiQueryStringParser.js","sourceRoot":"","sources":["../../src/ApiQueryStringParser.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiEdgeQueryContext, ApiRequestPath, ApiEdgeError, OneToOneRelation, ApiEdgeQueryFilterType} from \"api-core\";\n\nfunction extractWhereClauseParts(key: string): string[] {\n    let parts: string[] = [];\n\n    while(key.length) {\n        if(key[0] !== '[') {\n            throw new ApiEdgeError(400, `Invalid Where Clause`);\n        }\n\n        const endOfPart = key.indexOf(']');\n        if(endOfPart < 2) {\n            throw new ApiEdgeError(400, `Invalid Where Clause`);\n        }\n\n        parts.push(key.substring(1, endOfPart));\n        key = key.substring(endOfPart + 1);\n    }\n\n    return parts\n}\n\nexport class ApiQueryStringParser {\n\n    static defaultLimit: number = 10;\n    static excludedKeys = [ \"sort\", \"embed\", \"fields\", \"skip\", \"limit\", \"page\" ];\n\n    static parse(query: any, path: ApiRequestPath): ApiEdgeQueryContext {\n        let context = new ApiEdgeQueryContext(),\n            lastSegment = path.segments[path.segments.length-1];\n\n        if(!lastSegment) {\n            throw new ApiEdgeError(400, \"Invalid Query Parameters\");\n        }\n\n        const edge = lastSegment.edge,\n            oneToOneRelations = edge.relations.filter(r => r instanceof OneToOneRelation).map(r => r.name);\n\n        if (query.fields) {\n            query.fields.split(',').forEach((field: string) => {\n                if(edge.schema.fields.indexOf(field) == -1) {\n                    throw new ApiEdgeError(400, `Invalid Field: ${field}`);\n                }\n\n                context.field(field)\n            })\n        }\n\n        if (query.embed) {\n            query.embed.split(',').forEach((field: string) => {\n                const relationId = oneToOneRelations.indexOf(field);\n\n                if(relationId == -1) {\n                    throw new ApiEdgeError(400, `Invalid Related Field: ${field}`);\n                }\n\n                context.populate(edge.relations[relationId].relationId)\n            })\n        }\n\n        if(query.sort) {\n            query.sort.split(',').forEach((s: string) => {\n                const field = s.substring(s[0] == '-' ? 1 : 0),\n                    direction = s[0] !== '-';\n\n                if(edge.schema.fields.indexOf(field) == -1) {\n                    throw new ApiEdgeError(400, `Invalid Field: ${field}`);\n                }\n\n                context.sort(field, direction);\n            })\n        }\n\n\n        let limit = +query.limit,\n            skip = +query.skip,\n            page = +query.page;\n\n        if(limit === limit ||\n            skip === skip ||\n            page === page) {\n            limit = limit || ApiQueryStringParser.defaultLimit;\n            if(page) skip = (page-1) * limit;\n            else skip = skip || 0;\n\n            context.paginate(skip, limit);\n        }\n\n        Object.keys(query).forEach(key => {\n            if(ApiQueryStringParser.excludedKeys.indexOf(key) == -1) {\n                const value = query[key];\n\n                if(key.substring(0, 5) == \"where\") {\n                    key = key.substring(5);\n\n                    const parts = extractWhereClauseParts(key);\n                    if(parts.length == 1) {\n                        key = parts[0];\n\n                        if(edge.schema.fields.indexOf(key) == -1) {\n                            throw new ApiEdgeError(400, `Invalid Field: ${key}`);\n                        }\n\n                        context.filter(key, ApiEdgeQueryFilterType.Equals, value)\n                    }\n                    else if(parts.length == 2) {\n                        key = parts[1];\n\n                        if(edge.schema.fields.indexOf(key) == -1) {\n                            throw new ApiEdgeError(400, `Invalid Field: ${key}`);\n                        }\n\n                        switch(parts[0]) {\n                            case 'eq':\n                                context.filter(key, ApiEdgeQueryFilterType.Equals, value);\n                                break;\n                            case 'ne':\n                                context.filter(key, ApiEdgeQueryFilterType.NotEquals, value);\n                                break;\n                            case 'gt':\n                                context.filter(key, ApiEdgeQueryFilterType.GreaterThan, value);\n                                break;\n                            case 'gte':\n                                context.filter(key, ApiEdgeQueryFilterType.GreaterThanOrEquals, value);\n                                break;\n                            case 'lt':\n                                context.filter(key, ApiEdgeQueryFilterType.LowerThan, value);\n                                break;\n                            case 'lte':\n                                context.filter(key, ApiEdgeQueryFilterType.LowerThanOrEquals, value);\n                                break;\n                            default:\n                                throw new ApiEdgeError(400, `Invalid Filter Operator: ${parts[0]}`);\n                        }\n                    }\n                }\n                else {\n                    if(edge.schema.fields.indexOf(key) == -1) {\n                        throw new ApiEdgeError(400, `Invalid Field: ${key}`);\n                    }\n\n                    context.filter(key, ApiEdgeQueryFilterType.Equals, value)\n                }\n            }\n        });\n\n        return context\n    }\n\n}\n"]}